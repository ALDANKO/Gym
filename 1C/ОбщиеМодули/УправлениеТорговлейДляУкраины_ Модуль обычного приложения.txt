Перем глСерверТО;
Перем мКлиентOnline;

Перем глОбщиеЗначения Экспорт;

Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации
Перем ФормаОповещенияЗадачОткрыта Экспорт;

Перем ФормаОжиданияКурсов;

Перем глМенеджерЗвит1С Экспорт;

Перем мНовФЛ Экспорт;

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));

КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)	
	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	КонтрольВерсииПлатформы.ПроверитьВерсиюПлатформы();
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли; 
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	
	мТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");
    	
	Если ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы() Тогда
		возврат;
	КонецЕсли;	
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСоединениямиИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();
	
	ПроверитьПодключениеОбработчикаОжидания();
	
	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");

	КонецЕсли;
	
	// Открытие встроенного почтового клиента при запуске системы, если это задано в настройках
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "АвтооткрытиеЭлектроннойПочтыПриЗапускеПрограммы") = Истина
	   И Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() 
	   И (Не ПервыйЗапуск) Тогда
		Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
	КонецЕсли; 

	
	ВключенИнтерфейсКассира = Ложь;
	
	ЗапускИнтерфейсаКассира(мТекущийПользователь, ВключенИнтерфейсКассира);
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
	Если ЭтоФайловаяИБ Тогда
					
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если мТекущийПользователь = ПользовательДляВыполненияРеглЗаданий Тогда
			
			// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// автообмен данными
	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
		
		// подключим обработчик обменов данными
		ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
			
	КонецЕсли;
	
	//Если интерфейс кассира включен - панель не нужна.
	Если НЕ ВключенИнтерфейсКассира Тогда
		ОткрытьПанельФункций = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОткрыватьПриЗапускеПанельФункций");

		Если ОткрытьПанельФункций 
		 Или ПервыйЗапуск Тогда
			ФормаПанели = Обработки.ПанельФункций.ПолучитьФорму();
			ФормаПанели.ПервыйЗапуск = ПервыйЗапуск;
			ФормаПанели.Открыть();
		КонецЕсли;

	КонецЕсли;
	
	// Открытие Быстрого освоения
	ПоказыватьБыстроеОсвоение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы");
	Если ПоказыватьБыстроеОсвоение 
	   И (Не ПервыйЗапуск) Тогда
		Обработки.БыстроеОсвоение.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	// Открытие списка задач
	ПоказыватьСписокЗадач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьСписокЗадачПриЗапуске");
	Если ПоказыватьСписокЗадач
	   И (Не ПервыйЗапуск) Тогда
		РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя();
	КонецЕсли;
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина 
	   И (Не ПервыйЗапуск) Тогда
		Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	ПоказыватьФормуДополнительнойИнформации = ВосстановитьЗначение("ПоказСтартовойФормыДополнительнойИнформации");
	ПоказыватьФормуДополнительнойИнформации = ?(ПоказыватьФормуДополнительнойИнформации = Неопределено, Истина, ПоказыватьФормуДополнительнойИнформации);
	Если ПоказыватьФормуДополнительнойИнформации 
	   И (Не ПервыйЗапуск) Тогда
		Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
		Форма.Открыть();
	КонецЕсли;	
	
	// Начнем проверку динамического обновления конфигурации
	НачатьПроверкуДинамическогоОбновленияИБ();

	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") Тогда
		
		// Автоматическая загрузка курсов валют
		ЗначениеКонстанты = Константы.НастройкиЗагрузкиКурсовВалют.Получить();
		Настройки 		  = ЗначениеКонстанты.Получить();
		ЗагружатьЕжедневно = Ложь;	
		Если Настройки <> Неопределено Тогда
			Попытка
				ЗагружатьЕжедневно = Настройки.ЗагружатьЕжедневно;
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
		Попытка
			Если ЗагружатьЕжедневно Тогда
				
				ОбработкаЗагрузкаКурсов = Обработки.ЗагрузкаКурсовВалют.Создать();
				Если НЕ ОбработкаЗагрузкаКурсов.КодДоступаАктуален() Тогда
					ФормаОжиданияКурсов = ОбработкаЗагрузкаКурсов.ПолучитьФорму("ФормаОжидания");
					ФормаОжиданияКурсов.Открыть();
					ПодключитьОбработчикОжидания("ОбработчикЗагрузкаКурсов", 20, Истина);
				Иначе
					ОбработкаЗагрузкаКурсов.ЗагрузитьКурсыПоНастройкам();
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;

	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ККМOnLine).Количество() > 0 Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	// Открытие формы помощника обновления конфигурации
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
		ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
	КонецЕсли;

	глПодключитьМенеджерЗвит1С(Ложь);
	
	//***Проверить есть ли не закрытые смены со вчера
	
	ЗакрытьОткрытыеПосещения(ТекущаяДата());
	
	Если РольДоступна(Метаданные.Роли.РабочийСтол) Тогда
		Форма = Обработки.РабочийСтолСпортЗал.ПолучитьФорму("Форма"); 
		Форма.СпособОтображенияОкна= ВариантСпособаОтображенияОкна.Максимизированное; 
		Форма.Открыть();
	КонецЕсли; 
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

Процедура ОбработчикЗагрузкаКурсов() Экспорт
	
	Если НЕ ФормаОжиданияКурсов = Неопределено Тогда
		Если ФормаОжиданияКурсов.Открыта() Тогда
			ФормаОжиданияКурсов.Закрыть();
			ФормаОжиданияКурсов = Неопределено;
			#Если Клиент Тогда
				ЗапуститьПриложение("http://finance.ua/ru/price/~/1c");
			#КонецЕсли	
			ОбработкаЗагрузкаКурсов = Обработки.ЗагрузкаКурсовВалют.Создать();
			ОбработкаЗагрузкаКурсов.ЗагрузитьКурсыПоНастройкам();
		КонецЕсли; 
		ФормаОжиданияКурсов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	    													  "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	КонецЕсли;

	Если Не Отказ И глМенеджерЗвит1С <> Неопределено Тогда
		глМенеджерЗвит1С.ЗавершитьЗвит1С(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()

	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();
	//

КонецПроцедуры

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
	Если Не ВыбраннаяНастройка = Неопределено Тогда

		Параметры = Неопределено;
		Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
			АвтоЗапуск = Неопределено;
			Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
			Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
				НовыйОтчет = Отчеты.РапортРуководителю.Создать();
				НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
				НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
				НовыйОтчетФорма.Открыть();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// Проверяет необходимость открытия формы "РегистрацияПродаж" документа "ЧекККМ.
//
Процедура ЗапускИнтерфейсаКассира(мТекущийПользователь, ВключенИнтерфейсКассира)
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПользовательИБ <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира

		ВключенИнтерфейсКассира = Истина;
		Администратор = Ложь;
		Кассир = Ложь;

		Для каждого ТекИнтерфейс Из ГлавныйИнтерфейс Цикл
			ТекИнтерфейс.Переключаемый = Ложь;
			ТекИнтерфейс.Видимость     = Ложь;
		КонецЦикла;
		ИнтерфейсКассира = ГлавныйИнтерфейс.ИнтерфейсКассира;
		ИнтерфейсКассира.Переключаемый = Истина;
		ИнтерфейсКассира.Видимость     = Истина;

		Если РольДоступна("АдминистраторККМ") Тогда //Администратор

			Администратор = Истина;

		ИначеЕсли РольДоступна("ОператорККМ") Тогда //Кассир

			Кассир = Истина;

		КонецЕсли;

		Отказ = Ложь;
		Причина = "";
		КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяКассаККМ");
		Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ мТекущийПользователь +""" не выбрана касса по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбрана касса по умолчанию";
		КонецЕсли;

		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойСклад");
		Если Склад = Неопределено
		 Или Склад = Справочники.Склады.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ мТекущийПользователь +""" не выбран склад по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбран склад по умолчанию";
		КонецЕсли;
		ФР = Неопределено;

		Если Не Отказ Тогда
			МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор, КассаККМ);

			Если МассивФР.Количество() <> 0 Тогда
				Если Склад.НомерСекции = 0 Тогда
					Предупреждение("У склада: """ + Склад + """не указан номер секции!");
					Отказ = Истина;
					Причина = "У склада не указан номер секции";
				КонецЕсли;
					
			Иначе
				Предупреждение("У кассы: """ + КассаККМ + """, для компьютера: """ + ПолучитьСерверТО().ПолучитьИмяКомпьютераТО() + """, фискальный регистратор не установлен!");
				Отказ = Истина;
				Причина = "У кассы не установлен ФР";
			КонецЕсли;
		КонецЕсли;

		Если Не Отказ Тогда

			Документы.ЧекККМ.СоздатьДокумент().ПолучитьФорму("ФормаРегистрацииПродаж",).Открыть();

		ИначеЕсли Администратор Тогда

			Предупреждение("Зайдите с правами администратора кассы.");
			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				ФормаПодключенияОборудования = Обработки.ТОНастройка.ПолучитьФорму();
				ФормаПодключенияОборудования.Открыть();
			КонецЕсли;
			ЗавершитьРаботуСистемы();

		ИначеЕсли Кассир Тогда

			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				Предупреждение("Зайдите с правами администратора кассы.");
			КонецЕсли;

			ЗавершитьРаботуСистемы();

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если Источник = "Zvit1C" Тогда
		
		// Актуализируем глМенеджерЗвит1С, если был подключен как внешний
		Если Не глПодключитьМенеджерЗвит1С() Тогда
			Возврат;
		КонецЕсли;

		глМенеджерЗвит1С.ОбработкаВнешнегоСобытияЗвит1С(Источник, Событие, Данные);	
		
		Возврат;
		
	КонецЕсли;
	
	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры // ОбработкаВнешнегоСобытия()

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = УправлениеСоединениямиИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции

// Подключить актуальный менеджер 1С-Звит
//
Функция глПодключитьМенеджерЗвит1С(ВыводитьСообщенияОбОшибках = Истина) Экспорт
	
	ИсточникОтчета = "РегламентированныйОтчетМенеджерЗвит1С";
	
	Если глМенеджерЗвит1С <> Неопределено Тогда
		
		// Проверим, был ли подключен/переподключен внешний менеджер 1С-Звит		
		Если РегламентированнаяОтчетность.ВерсияРеглОтчетаАктуальна(ИсточникОтчета) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
		Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
			
			Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
				Предупреждение(НСтр("ru='Недостаточно прав на использование модуля взаимодействия с ""1С-Звит""!';uk='Недостатньо прав на використання модуля взаємодії зі ""1С-Звіт""!'"));
			КонецЕсли;			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗвит1С = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	
	Если МенеджерЗвит1С = Неопределено Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			Сообщить(НСтр("ru='Не удалось получить менеджер ""1С-Звит""!';uk='Не вдалося отримати менеджер ""1С-Звіт""!'"), СтатусСообщения.Важное);
			// Возможно это ошибка для которой детальная информация не должна выводиться
			// выведем ее принудительно
			НайденныйЭлемент = РегламентированнаяОтчетность.ПолучитьРеглОтчетПоУмолчанию(ИсточникОтчета);
			Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				Сообщить(НСтр("ru='В справочнике ""Регламентированные отчеты"" не найден менеджер по работе с системой ""1С-Звит""';uk='У довіднику ""Регламентовані звіти"" не знайдено менеджер по роботі з системою ""1С-Звіт""'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если глМенеджерЗвит1С <> Неопределено Тогда
			
			Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
				Сообщить(НСтр("ru='Будет использован уже загруженный менеджер';uk='Буде використаний вже завантажений менеджер'"), СтатусСообщения.Информация);
			КонецЕсли;
			Возврат Истина;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(МенеджерЗвит1С) = Тип("ОтчетМенеджер.РегламентированныйОтчетМенеджерЗвит1С") Тогда
		МенеджерЗвит1С = МенеджерЗвит1С.Создать();
	КонецЕсли;
	
	Если глМенеджерЗвит1С = Неопределено Тогда
		
		// Обновляем глобальную переменную сразу для поддержки новых конфигураций с старым внешним менеджером 1С-Звит
		глМенеджерЗвит1С = МенеджерЗвит1С;
		
		Если Не глМенеджерЗвит1С.Инициализация(ВыводитьСообщенияОбОшибках) Тогда		
			глМенеджерЗвит1С = Неопределено;
			Возврат Ложь;	
		КонецЕсли;
		
	Иначе
		Попытка
			
			Если Не МенеджерЗвит1С.Переинициализация(ВыводитьСообщенияОбОшибках, глМенеджерЗвит1С) Тогда		
				Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
					Сообщить(НСтр("ru='Будет использован уже загруженный менеджер';uk='Буде використаний вже завантажений менеджер'"), СтатусСообщения.Информация);
				КонецЕсли;
				Возврат Истина;
				
			КонецЕсли;
			
			глМенеджерЗвит1С = МенеджерЗвит1С;
			
		Исключение
			
			// Если остался устаревший менеджер 1С-Звит. То в нем нет метода Переинициализация(...)
			Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
				Сообщить(НСтр("ru = 'Не удалось переподключить менеджер ""1С-Звит"". 
                                     |Необходимо обновить менеджер 1С-Звит в справочнике ""Регламентированные отчеты""'; uk = 'Не вдалося перепідключити менеджер ""1С-Звіт"".
                                     |Необхідно оновити менеджер 1С-Звіт в довіднику ""Регламентовані звіти""'"), СтатусСообщения.Важное);
				Сообщить(НСтр("ru='Будет использован уже загруженный менеджер';uk='Буде використаний вже завантажений менеджер'"), СтатусСообщения.Информация);			
			КонецЕсли;
			Возврат Истина;
			
		КонецПопытки;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Процедура ЗакрытьОткрытыеПосещения(Дата) Экспорт
	ЖурналВыхода = РегистрыСведений.ЖурналПосещений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналПосещений.Период,
		|	ЖурналПосещений.Абонемент,
		|	ЖурналПосещений.Ящик,
		|	ЖурналПосещений.ДатаВход,
		|	ЖурналПосещений.ДатаВыход,
		|	ЖурналПосещений.ВидАбонемента,
		|	ЖурналПосещений.Регистратор
		|ИЗ
		|	РегистрСведений.ЖурналПосещений КАК ЖурналПосещений
		|ГДЕ
		|	ЖурналПосещений.ДатаВыход = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЖурналПосещений.Период < &Период";

	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Результат = Запрос.Выполнить();
	ВыборкаЖурналаВыхода= Результат.Выбрать();
	Пока ВыборкаЖурналаВыхода.Следующий() Цикл
		Сообщить("Абонемент " + ВыборкаЖурналаВыхода.Абонемент + 
		" не выходил, а вошел "+ВыборкаЖурналаВыхода.ДатаВход +
		", Ящик "+  ВыборкаЖурналаВыхода.Ящик);
		//МН=РегистрыСведений.ЖурналПосещений.СоздатьМенеджерЗаписи(); 
		//МН.ДатаВход		=	ВыборкаЖурналаВыхода.ДатаВход;
		//МН.Абонемент	=	ВыборкаЖурналаВыхода.Абонемент;
		//МН.Активность	=	Истина;
		//МН.Ящик			=	ВыборкаЖурналаВыхода.Ящик;
		//МН.Период		=	ВыборкаЖурналаВыхода.Период;
		//МН.ВидАбонемента=   ВыборкаЖурналаВыхода.ВидАбонемента;
		//МН.ДатаВыход	=   Дата(1,1,1);
		//МН.Прочитать();
		//МН.ДатаВыход	= КонецДня(ВыборкаЖурналаВыхода.Период);
		//МН.Период		= КонецДня(ВыборкаЖурналаВыхода.Период);
		//МН.Записать(Истина);
			
		мДок=ВыборкаЖурналаВыхода.Регистратор;
		ТекДок=мДок.ПолучитьОбъект();
		Если ТекДок.СуммаТренера>ТекДок.СуммаОплаты и ТекДок.ДатаВыход=Дата(1,1,1) тогда
			Предупреждение("Абонемент "+ТекДок.Абонемент+" ("+ТекДок.Клиент.Наименование+") не оплачен !",30,"ВНИМАНИЕ!");
			Сообщить("ВНИМАНИЕ! Абонемент "+ТекДок.Абонемент+" ("+ТекДок.Клиент.Наименование+") не оплачен !");
		Иначе
			ТекДок.ДатаВыход= КонецДня(ВыборкаЖурналаВыхода.Период);
			ТекДок.Дата 	= КонецДня(ВыборкаЖурналаВыхода.Период);
			ТекДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

	
АдресРесурсовОбозревателя = "TradeUkr"; // Не допускается изменять значение данной переменной
