Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мМинимальныеЦены Экспорт;

Перем мРассчитыватьАвтоматическиеСкидки;
Перем мСписокФильтров;

Перем мУчетнаяПолитика;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

//	Если ЭтоНовый() Тогда
//		Предупреждение("Документ можно распечатать только после его записи");
//		Возврат;
//	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
//		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
//		Возврат;
//	КонецЕсли;

//	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
//		Возврат;
//	КонецЕсли;

//	Если ИмяМакета = "Чек" Тогда
//		ТабДокумент = ПечатьЧека();
//		Если ТабДокумент = Неопределено Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;

//	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
//	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	//СтруктураМакетов = Новый Структура("Чек", "Чек");

	//Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма")*?(Руководитель,0,1);
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	Ответственный= глЗначениеПеременной("глТекущийПользователь");
	СуммаОплаты=СуммаДокумента;
	//При проведении документа проверим возможность получения бонусов.
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
	//	Если СуммаДокумента>СуммаОплаты тогда
	//		Отказ=Истина;
	//		Предупреждение("Оплаты не достаточно...",30,"ВНИМАНИЕ!");
	//	Иначе
	//		Отказ=Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем ДеревоПолейЗапросаПоШапке;
	мКонтрагент	= Справочники.Контрагенты.НайтиПоКоду("000000002");
	мДоговор	= мКонтрагент.ОсновнойДоговорКонтрагента;
	// регистр ВремяДействияАбонемента

    	//***170806
	Если не Руководитель тогда
		// регистр ВзаиморасчетыСКонтрагентами Приход
		Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
		Движения.ВзаиморасчетыСКонтрагентами.Очистить();
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.Организация 	= ЭтотОбъект.Организация;
		Движение.Контрагент 	= мКонтрагент;
		Движение.СуммаВзаиморасчетов = ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 		= ЭтотОбъект.СуммаДокумента;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;
		
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.Организация 	= ЭтотОбъект.Организация;
		Движение.Контрагент 	= мКонтрагент;
		Движение.СуммаВзаиморасчетов = ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 		= ЭтотОбъект.СуммаДокумента;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;	
		Движения.Записать();
		
		// регистр ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов Приход
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Записывать = Истина;
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Очистить();
		Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
		Движение.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Контрагент 		= мКонтрагент;
		Движение.СуммаВзаиморасчетов= ЭтотОбъект.СуммаДокумента;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;	
		
		Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
		Движение.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Контрагент 		= мКонтрагент;
		Движение.СуммаВзаиморасчетов= ЭтотОбъект.СуммаДокумента;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;	
		Движения.Записать();
		
		// регистр ДвиженияДенежныхСредств 
		Движения.ДвиженияДенежныхСредств.Записывать = Истина;
		Движения.ДвиженияДенежныхСредств.Очистить();
		Движение = Движения.ДвиженияДенежныхСредств.Добавить();
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.БанковскийСчетКасса= ЭтотОбъект.Касса;
		Движение.ВидДенежныхСредств = Перечисления.ВидыДенежныхСредств.Наличные;
		Движение.ПриходРасход 		= ВидДвиженияНакопления.Приход;
		Движение.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		Движение.ДокументДвижения 	= ЭтотОбъект.Ссылка;
		Движение.Контрагент 		= мКонтрагент;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Сумма 				= ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 			= ЭтотОбъект.СуммаДокумента;
		
		Движения.Записать();
		// регистр ДенежныеСредства Приход
		Движения.ДенежныеСредства.Записывать = Истина;
		Движения.ДенежныеСредства.Очистить();
		Движение = Движения.ДенежныеСредства.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.ВидДенежныхСредств = Перечисления.ВидыДенежныхСредств.Наличные;
		Движение.БанковскийСчетКасса = ЭтотОбъект.Касса;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Сумма 				= ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 			= ЭтотОбъект.СуммаДокумента;
		
		Движения.Записать();
		
		// регистр РасчетыСКонтрагентами Приход
		Движения.РасчетыСКонтрагентами.Записывать = Истина;
		Движения.РасчетыСКонтрагентами.Очистить();
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Контрагент 		= мКонтрагент;
		Движение.СуммаВзаиморасчетов = ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 			= ЭтотОбъект.СуммаДокумента;
		
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.ДоговорКонтрагента = мДоговор;
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Контрагент 		= мКонтрагент;
		Движение.СуммаВзаиморасчетов = ЭтотОбъект.СуммаДокумента;
		Движение.СуммаУпр 			= ЭтотОбъект.СуммаДокумента;
		
		Движения.Записать();
		
		//*** расчеты за бар с администратором 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПродажиСпортзалТовары.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ПродажиСпортзал.Товары КАК ПродажиСпортзалТовары
		|ГДЕ
		|	(ПродажиСпортзалТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|			ИЛИ ПродажиСпортзалТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры1
		|			ИЛИ ПродажиСпортзалТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры2)
		|	И ПродажиСпортзалТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры",Справочники.ВидыНоменклатуры.НайтиПоКоду("000000003"));
		Запрос.УстановитьПараметр("ВидНоменклатуры1",Справочники.ВидыНоменклатуры.НайтиПоКоду("000000002"));
		Запрос.УстановитьПараметр("ВидНоменклатуры2",Справочники.ВидыНоменклатуры.НайтиПоКоду("000000004"));
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если не Результат.Пустой() тогда
			ВыборкаДетальныеЗаписи.Следующий();
			//***160318
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сумма) тогда
				Движения.ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
				Движения.ВзаиморасчетыСПодотчетнымиЛицами.Очистить();
				Движение = Движения.ВзаиморасчетыСПодотчетнымиЛицами.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
				Движение.Период 	 	= Дата;
				Движение.ФизЛицо 		= АдминСЗ;
				Движение.РасчетныйДокумент 		= Ссылка;
				Движение.Организация 			= Организация;
				ПроцентА=Константы.ПроцентАдминистраторуЗаБар.Получить();
				Движение.СуммаВзаиморасчетов 	= ВыборкаДетальныеЗаписи.Сумма*ПроцентА/100;
				Движение.СуммаУпр 				= ВыборкаДетальныеЗаписи.Сумма*ПроцентА/100;
				Движение.Регистратор			= Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	   //***170806
	
	//***Списание сосклада
	// товары в рознице
	// партии товаров на складах
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПродажиСпортзалТовары.Номенклатура КАК Номенклатура,
	             |	СУММА(ПродажиСпортзалТовары.Количество) КАК Количество,
	             |	ПродажиСпортзалТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ПродажиСпортзалТовары.Сумма) КАК Сумма
	             |ПОМЕСТИТЬ Товар
	             |ИЗ
	             |	Документ.ПродажиСпортзал.Товары КАК ПродажиСпортзалТовары
	             |ГДЕ
	             |	ПродажиСпортзалТовары.Ссылка = &Ссылка
	             |	И ПродажиСпортзалТовары.Номенклатура.Услуга = ЛОЖЬ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПродажиСпортзалТовары.Номенклатура,
	             |	ПродажиСпортзалТовары.ХарактеристикаНоменклатуры
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(КомплектующиеНоменклатуры.Комплектующая, ТОВАР.Номенклатура) КАК Номенклатура,
	             |	СУММА(ЕСТЬNULL(КомплектующиеНоменклатуры.Количество, 1) * ТОВАР.Количество) КАК Количество,
	             |	ЕСТЬNULL(КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры, ТОВАР.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры
	             |ПОМЕСТИТЬ ТоварВсего
	             |ИЗ
	             |	Товар КАК ТОВАР
	             |		Левое СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	             |		ПО ТОВАР.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаКомплектующей
	             |			И ТОВАР.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(КомплектующиеНоменклатуры.Комплектующая, ТОВАР.Номенклатура),
	             |	ЕСТЬNULL(КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры, ТОВАР.ХарактеристикаНоменклатуры)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(Товар.Номенклатура, ПартииТоваровНаСкладахОстатки.Номенклатура) КАК Номенклатура,
	             |	ПартииТоваровНаСкладахОстатки.Склад,
	             |	ЕСТЬNULL(Товар.ХарактеристикаНоменклатуры, ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	             |	ПартииТоваровНаСкладахОстатки.СтатусПартии,
	             |	ПартииТоваровНаСкладахОстатки.Качество,
	             |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	             |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток,
	             |	ЕСТЬNULL(Товар.Количество, 0) КАК Количество
	             |ИЗ
	             |	ТоварВсего КАК Товар
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	             |				&Дата,
	             |				Склад = &Склад
	             |					И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	             |					И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК ПартииТоваровНаСкладахОстатки
	             |		ПО Товар.Номенклатура = ПартииТоваровНаСкладахОстатки.Номенклатура
	             |			И Товар.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры";

	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад",ЭтотОбъект.Склад);
	Запрос.УстановитьПараметр("Дата",ЭтотОбъект.Дата);
	Результат = Запрос.Выполнить();
	ТаблицаПроведения=Результат.Выбрать();
	СуммаВход=0;
	Кол=0;
	КолТС=0;//***170806
	МН=Справочники.Номенклатура.ПустаяСсылка();
	Пока ТаблицаПроведения.Следующий() Цикл
		Если МН<>ТаблицаПроведения.Номенклатура тогда
			Кол=0;	
		КонецЕсли;
		//+++20151230
		КолТС=ТаблицаПроведения.Количество;
		Если ТаблицаПроведения.Номенклатура.Код="00000000039" тогда
			Кол=-ТаблицаПроведения.Количество;
		Иначе
			Кол=?(МАКС(ТаблицаПроведения.Количество-Кол,0)<=ТаблицаПроведения.КоличествоОстаток,
			ТаблицаПроведения.Количество-Кол,
			ТаблицаПроведения.КоличествоОстаток);
		КонецЕсли;
		Если МАКС(ТаблицаПроведения.Количество,0)>ТаблицаПроведения.КоличествоОстаток Тогда
			ТекстСообщения="Документ - №"+ЭтотОбъект.Номер+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy; ДЛФ=DT")+" Не списано по партиям товаров на складах "+СокрЛП(ТаблицаПроведения.Номенклатура.Наименование)+
			?(ЗначениеЗаполнено(ТаблицаПроведения.ХарактеристикаНоменклатуры), ", Харатеристика - "+СокрЛП(ТаблицаПроведения.ХарактеристикаНоменклатуры.Наименование),"");
			Сообщить(ТекстСообщения);
			//Отказ=Истина;
		КонецЕсли; 
		Если ТаблицаПроведения.Номенклатура.Код="00000000039" или  Кол >0 Тогда
			ДвижениеПТС = Движения.ПартииТоваровНаСкладах.Добавить();
			ДвижениеПТС.ВидДвижения = ВидДвиженияНакопления.Расход;
			ДвижениеПТС.Период = Дата;
			ДвижениеПТС.Номенклатура = ТаблицаПроведения.Номенклатура;
			ДвижениеПТС.Склад = Склад;
			ДвижениеПТС.ХарактеристикаНоменклатуры = ТаблицаПроведения.ХарактеристикаНоменклатуры;
			ДвижениеПТС.Качество = ТаблицаПроведения.Качество;
			ДвижениеПТС.Количество = Кол;
			Цена=?(ТаблицаПроведения.КоличествоОстаток=0,0,ТаблицаПроведения.СтоимостьОстаток/ТаблицаПроведения.КоличествоОстаток);
			Цена=МАКС(Цена,0);
			ДвижениеПТС.Стоимость = Цена*Кол;//ТаблицаПроведения.Количество;
			СуммаВход=СуммаВход+Цена*ТаблицаПроведения.Количество;
			ДвижениеПТС.КодОперации = Перечисления.КодыОперацийПартииТоваров.РеализацияРозница;
			ДвижениеПТС.СписаниеПартий = ИСТИНА;
			ДвижениеПТС.ДокументДвижения = Ссылка;
			ДвижениеПТС.СтатусПартии	 = ТаблицаПроведения.СтатусПартии;
		КонецЕсли; 	
			//// регистр ТоварыВРознице Расход
			ДвижениеТС = Движения.ТоварыВРознице.Добавить();
			ДвижениеТС.ВидДвижения = ВидДвиженияНакопления.Расход;
			ДвижениеТС.Период = Дата;
			ДвижениеТС.Склад = Склад;
			ДвижениеТС.Номенклатура = ТаблицаПроведения.Номенклатура;
			ДвижениеТС.ХарактеристикаНоменклатуры = ТаблицаПроведения.ХарактеристикаНоменклатуры;
			ДвижениеТС.Качество 	= ?(ЗначениеЗаполнено(ТаблицаПроведения.Качество),Справочники.Качество.Новый,ТаблицаПроведения.Качество);
			ДвижениеТС.Количество 	= КолТС;//ТаблицаПроведения.Количество;
			мЦена=Ценообразование.ПолучитьЦенуНоменклатуры(ТаблицаПроведения.Номенклатура, 
				ТаблицаПроведения.ХарактеристикаНоменклатуры, 
					ЭтотОбъект.ТипЦен, 
						ЭтотОбъект.Дата, 
							ТаблицаПроведения.Номенклатура.ЕдиницаХраненияОстатков, 
								Справочники.Валюты.НайтиПоКоду("980"));
			ДвижениеТС.СуммаПродажная=КолТС*мЦена;
			
			
			// регистр ТоварыОрганизаций Расход
			ДвижениеТО = Движения.ТоварыОрганизаций.Добавить();
			ДвижениеТО.Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ДвижениеТО.ВидДвижения = ВидДвиженияНакопления.Расход;
			ДвижениеТО.Период = Дата;
			ДвижениеТО.Склад = Склад;
			ДвижениеТО.Номенклатура = ТаблицаПроведения.Номенклатура;
			ДвижениеТО.ХарактеристикаНоменклатуры= ТаблицаПроведения.ХарактеристикаНоменклатуры ;
			ДвижениеТО.Качество 	= ?(ЗначениеЗаполнено(ТаблицаПроведения.Качество),Справочники.Качество.Новый,ТаблицаПроведения.Качество);//*** ТаблицаПроведения.Качество;
			ДвижениеТО.Количество 	= КолТС;//ТаблицаПроведения.Количество;
			МН=ТаблицаПроведения.Номенклатура;
		
	КонецЦикла;
		
		
	//Если мУдалятьДвижения Тогда
	//	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
КонецПроцедуры // ОбработкаУдаленияПроведения

Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мАннулировать                   = Ложь;
мПараметрыСвязиСтрокТЧ          = Новый Соответствие;

мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);

УказаниеСкладов     = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

